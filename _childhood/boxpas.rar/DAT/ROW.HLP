                               Regime of Windows
                                  Version 1.0

  Модуль ROW содержит в себе набор процедур и функций, с помощью  которых
вы можете конструировать свой оконный режим. Также в нем имеются зарезер-
вированные переменные, изменяя значения которых можно изменять  стандарты
оконного режима(цвет, фон, размер и т.п.).
  Процедуры, функции и зарезервированные переменные модуля ROW:
┌───────────────────────────────────────────────────────────────────────┐
│                                  Mouse_On                             │
└───────────────────────────────────────────────────────────────────────┘
    procedure Mouse_On;
  Процедура инициализирует мышку, и появляется курсор мышки в левом верх-
нем углу экрана.
┌───────────────────────────────────────────────────────────────────────┐
│                                  Mouse_Off                            │
└───────────────────────────────────────────────────────────────────────┘
    procedure Mouse_Off;
  Процедура отключает мышку.

┌───────────────────────────────────────────────────────────────────────┐
│                                   MouseX                              │
└───────────────────────────────────────────────────────────────────────┘
    function MouseX:byte;
  Функция определяет координату расположения мышки по оси OX.
┌───────────────────────────────────────────────────────────────────────┐
│                                   MouseY                              │
└───────────────────────────────────────────────────────────────────────┘
    function MouseY:byte;
  Функция определяет координату расположения мышки по оси OY.
┌───────────────────────────────────────────────────────────────────────┐
│                                ReturnCursor                           │
└───────────────────────────────────────────────────────────────────────┘
    procedure ReturnCursor;
  Процедура устанавливает курсор по стандартным координатам и в этом мес-
те выводит на экран стандартный символ.
  Зарезервированные переменные этой процедуры:
1. Return_X:byte - Координата расположения курсора по оси OX.
   Стандартное значение: 1.

2. Return_Y:byte - Координата расположения курсора по оси OY.
   Стандартное значение: 25.
3. ReturnChar:char - Символ, выводимый при возврате курсора.
   Стандартное значение: 'Ў'.
4. ReturnCharColor:byte - Цвет вывода на экран символа ReturnChar.
   Стандартное значение: 13.
5. ReturnCharBKColor:byte - Фон вывода на экран символа ReturnChar.
   Стандартное значение: 7.
┌───────────────────────────────────────────────────────────────────────┐
│                                  SetGround                            │
└───────────────────────────────────────────────────────────────────────┘
    procedure SetGround;
  Процедура рисует основной фон экрана.
  Зарезервированные переменные этой процедуры:
1. GroundChar:char - Символ, из которого строится основной фон экрана.
   Стандартное значение: '░'.
2. GroundColor:byte - Цвет вывода на экран символа GroundChar.
   Стандартное значение: 1.
3. GroundBKColor:byte - Фон вывода на экран символа GroundChar.
   Стандартное значение: 7.
┌───────────────────────────────────────────────────────────────────────┐
│                                 StatusLine                            │
└───────────────────────────────────────────────────────────────────────┘
    procedure StatusLine(PressChar:char; Name:string);
  Процедура устанавливает опцию в нижней строке экрана.
  Name - название опции, PressChar - символ(клавиша),  с  помощью которой
вызывается эта опция.
  Пример:
  StatusLine('X','Exit'); - устанавливается опция с названием "Exit", ко-
торую можно вызвать,  нажав клавишу "X"(это  делается  с  помощью функции
ButtonOptions).
  Зарезервированные переменные этой процедуры:
1. StatusLineColor:byte - Цвет вывода на экран названия опции(Name).
   Стандартное значение: 0.
2. StatusLinePressColor:byte - Цвет вывода на экран символа вызова  опции
(PressChar).
   Стандартное значение: 4.
3. StatusLineBKColor:byte - Фон вывода на экран  названия  опции(Name)  и
символа вызова  опции(PressChar).
   Стандартное значение: 7.
┌───────────────────────────────────────────────────────────────────────┐
│                                ButtonOptions                          │
└───────────────────────────────────────────────────────────────────────┘
    function ButtonOptions:string;
  Если была нажата клавиша,  функция определяет к какой  опции  относится
эта клавиша  и  к  ButtonOptions присваивается название этой опции.  Если
клавиша не была нажата или она не относится ни к одной опции,  то  Button
Options принимает значение ''.
  Примечание: Функция не ждет нажатия  клавиши, а проверяет  один  раз  в
данный момент. Если вы хотите, чтобы она ждала,  то  действуйте  примерно
так:
 ...
 StatusLine('X','Выход');
 repeat
 ...
 until ButtonOptions='Выход';
 ...
  Примечание: Если  вы  определили  опцию с названием "Выход", то условие
ButtonOptions='выход' будет всегда ложно. В крайнем случае можно  исполь-
зовать UpCase: UpCase(ButtonOptions)='ВЫХОД'. К символу вызова опции  эти
правила не относятся.
┌───────────────────────────────────────────────────────────────────────┐
│                                EnterOptions                           │
└───────────────────────────────────────────────────────────────────────┘
    procedure EnterOptions(Name:string);
  Процедура подсвечивает опцию с названием Name. Этот эффект можно  испо-
льзовать при вызове опции.
  Зарезервированные переменные этой процедуры:
1. EnterOptionsColor:byte - Цвет подсвечивания опции.
   Стандартное значение: 10.
2. EnterOptionsDelay:word - Длительность подсвечивания опции(в милисек.).
   Стандартное значение: 250.
┌───────────────────────────────────────────────────────────────────────┐
│                                   Window                              │
└───────────────────────────────────────────────────────────────────────┘
    procedure Window(WX,WY,WOX,WOY:byte; NameWindow:string);
  Процедура выводит на экран окно. Левый верхний угол  окна  определяется
точкой (WX;WY), учитывая, что левый верхний угол экрана определяется точ-
кой (1;1). WOX и WOY - длина и ширина окна. NameWindow - название окна.
  Примечание: Все координаты и размеры окна определяются не в пикселах, а
в знакоместах.
  Зарезервированные переменные этой процедуры:
1. WindowChar:char - Символ, из которого будет строиться фон окна.
   Стандартное значение: '█'.
2. WindowColor:byte - Цвет вывода на экран символа WindowChar.
   Стандартное значение: 7.
3. WindowBKColor:byte - Фон вывода на экран символа WindowChar.
   Стандартное значение: 1.
4. WindowLimitColor:byte - Цвет вывода на экран границы окна.
   Стандартное значение: 15.
5. WindowCloseChar:char - Символ, обозначающий закрытие окна.
   Стандартное значение: '■'.
6. WindowCloseCharColor:byte - Цвет вывода на экран  символа  WindowClose
Char.
   Стандартное значение: 10.
7. WindowShadowColor:byte - Цвет вывода на экран тени окна.
   Стандартное значение: 0.



┌───────────────────────────────────────────────────────────────────────┐
│                                 WindowText                            │
└───────────────────────────────────────────────────────────────────────┘
    procedure WindowText(WX,WY:byte; T:string);
  Процедура выводит в окне текст. Вывод текста(T) начинается с точки (WX;
WY), учитывая, что левый верхний угол окна определяется точкой (0;0).
  Зарезервированные переменные этой процедуры:
1. WindowTextColor:byte - Цвет вывода на экран текста.
   Стандартное значение: 0.
┌───────────────────────────────────────────────────────────────────────┐
│                                WindowButton                           │
└───────────────────────────────────────────────────────────────────────┘
    procedure WindowButton(BX,BY,BOX,BOY:byte; BName:string);
  Процедура устанавливает в окне кнопку с названием BName. Левый  верхний
угол кнопки определяется точкой (BX;BY), учитывая, что левый верхний угол
окна определяется точкой (0;0). BOX и BOY - длина и ширина кнопки.
  Зарезервированные переменные этой процедуры:
1. WindowButtonColor:byte - Цвет кнопки.
   Стандартное значение: 10.
2. WindowButtonNameColor:byte - Цвет названия кнопки.
   Стандартное значение: 14.
┌───────────────────────────────────────────────────────────────────────┐
│                                 PushButton                            │
└───────────────────────────────────────────────────────────────────────┘
    procedure PushButton(BName:string);
  Процедура производит эффект нажатия кнопки с названием BName.
  Зарезервированные переменные этой процедуры:
1. PushButtonDelay:word - Длительность нажатия кнопки(в милисек.).
   Стандартное значение: 300.
┌───────────────────────────────────────────────────────────────────────┐
│                               WindowInputLine                         │
└───────────────────────────────────────────────────────────────────────┘
   procedure WindowInputLine(IX,IY,IOX:byte;IName:string;var per:string);
  Процедура устанавливает в окне строку ввода данных(т. е.  с  клавиатуры
будут вводиться какие-то данные). Точка (IX;IY) - начало установки строки
ввода данных, учитывая, что левый верхний угол экрана определяется точкой
(0;0). IOX - длина строки ввода данных. IName  -  название  строки  ввода
данных. Per - переменная, в которую будут считываться данные.
  Зарезервированные переменные этой процедуры:
1. InputLineColor:byte - Цвет строки ввода данных.
   Стандартное значение: 9.
2. InputLineTextColor:byte - Цвет символов, вводимых с клавиатуры.
   Стандартное значение: 14.
3. InputLineNameColor:byte - Цвет названия строки ввода данных.
   Стандартное значение: 15.
┌───────────────────────────────────────────────────────────────────────┐
│                                 InputLineOn                           │
└───────────────────────────────────────────────────────────────────────┘
    procedure InputLineOn(Name:string);
  Если функция MousePush(см. ниже) определила включение строки ввода дан-
ных, то, сперва, вы должны включить эту строку  ввода  данных  процедурой
InputLineOn для считывания информации(InputWhat). Для включения вы должны
указать название строки ввода данных, которую нужно включить. При включе-
нии курсор устанавливается в строку ввода данных.
  Зарезервированные переменные этой процедуры:
1. NILine:string - Когда вы включаете строку ввода данных, название  этой
строки сохраняется в этой переменной.
   Стандартное значение: ''.


┌───────────────────────────────────────────────────────────────────────┐
│                                  InputWhat                            │
└───────────────────────────────────────────────────────────────────────┘
    procedure InputWhat(var per:string);
  Если включена строка ввода данных(InputLineOn) и была  нажата  клавиша,
то процедура дописует в per этот символ и выводит на экран  значение  per
(в строке ввода данных).
  Примечание: Процедура не ждет нажатия клавиши, а проверяет один  раз  в
данный момент.
  Переменную(per) нужно использовать ту же, что и в WindowInputLine.
┌───────────────────────────────────────────────────────────────────────┐
│                                  MousePush                            │
└───────────────────────────────────────────────────────────────────────┘
    function MousePush:string;
  Если была нажата  левая кнопка  мыши, то функция  определяет координаты
расположения мыши. Если эти координаты совпали с координатами опции, кно-
пки, строки ввода данных, значка закрытия окна, то к MousePush присваива-
ется название одного из перечисленных объектов. Для значка закрытия  окна
к MousePush присваивается значение 'CloseWindow'. Если у вас имеется мно-
го разных объектов, то программа такого типа будет плохо работать:
...
if MousePush='Выход' then ...;
if MousePush='Настройки' then ...;
if MousePush='Ok' then ...;
if MousePush='Фамилия:' then ...;
if MousePush='Cancel' then ...;
...
Лучше всего действовать таким образом:
...
What:=MousePush;
if What<>'' then
  begin
   if What='Выход' then ...;
   if What='Ok' then ...;
   ...
  end;
  Примечание: Переменная What также является зарезервированной переменной
типа string.  Начальное ее значение:  ''. Вы можете использовать  ее,  не
объявляя в начале программы.

┌───────────────────────────────────────────────────────────────────────┐
│                                 CloseWindow                           │
└───────────────────────────────────────────────────────────────────────┘
    procedure CloseWindow;
  Процедура производит эффект закрытия окна. Окно закрывается по частям.
  Зарезервированные переменные этой процедуры:
1. WindowCloseDelay:word - Длительность закрытия одной части окна(в мили-
сек.).
   Стандартное значение: 1.